apply plugin: 'com.android.library'
// Project information
buildDir = 'bin'

def getPackageName() {
  return "org.linphone"
}

def firebaseEnable() {
  File googleFile = new File('google-services.json')
  return googleFile.exists()
}

buildscript {
  File googleFile = new File('google-services.json')
  repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
    google()
  }
  dependencies {
    classpath "com.android.tools.build:gradle:3.0.1"
    if (googleFile.exists()) {
      classpath 'com.google.gms:google-services:3.2.0'
    }
  }
}

allprojects {
  repositories {
    google()
    jcenter()
    mavenLocal()
  }
}

//apply plugin: 'kotlin-android'
//
//apply plugin: 'kotlin-android-extensions'
//apply plugin: 'kotlin-kapt'

dependencies {
  //  androidTestCompile('com.android.support.test.espresso:espresso-core:+') {
  //    exclude module: 'support-annotations'
  //  }
  //  androidTestCompile 'com.jayway.android.robotium:robotium-solo:+'
  //  androidTestCompile 'junit:junit:+'
  api 'org.apache.commons:commons-compress:1.16.1'
  if (firebaseEnable()) {
    api 'com.google.firebase:firebase-messaging:11.+'
  } else {
    api fileTree(include: 'gcm.jar', dir: 'libs')
    //    compile 'com.android.support:appcompat-v7:27.0.2'
    api deps.support.app_compat
    api deps.support.v4
  }
}

if (firebaseEnable()) {
  apply plugin: 'com.google.gms.google-services'
}


//// Submodule Dir /////
def submoduleDir = ['submodules/mediastreamer2/java/src',
                    'submodules/linphone/java/j2se',
                    'submodules/linphone/java/common',
                    'submodules/linphone/java/impl',
                    'submodules/linphone/coreapi/help/examples/java']
////////////////////////

///// Exclude Files /////
def excludeFiles = []
// Exclude firebase file if not enable
if (!firebaseEnable()) {
  excludeFiles.add('**/Firebase*')
  println '[Push Notification] Firebase disabled'
} else {
  excludeFiles.add('**/gcm*')
  println '[Push Notification] Firebase enabled'
}
excludeFiles.add('**/mediastream/MediastreamerActivity.java')

def excludePackage = []

excludePackage.add('**/gdb.*')
excludePackage.add('**/libopenh264**')
excludePackage.add('**/**tester**')
excludePackage.add('**/LICENSE.txt')
/////////////////////////

android {
  compileSdkVersion 27
  defaultConfig {
    compileSdkVersion 27
    //    applicationId getPackageName()
    //    multiDexEnabled true

    //    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }
  //databind绑定
  //  dataBinding {
  //    enabled = true
  //  }
  lintOptions {
    checkReleaseBuilds false
    // Or, if you prefer, you can continue to check for errors in release builds,
    // but continue the build even when errors are found:
    abortOnError false
    disable 'MissingTranslation', 'UnusedResources'
  }
  dexOptions {
    javaMaxHeapSize "6g"
  }
  // Signing
  //  signingConfigs {
  //    release {
  //      storeFile file(RELEASE_STORE_FILE)
  //      storePassword RELEASE_STORE_PASSWORD
  //      keyAlias RELEASE_KEY_ALIAS
  //      keyPassword RELEASE_KEY_PASSWORD
  //    }
  //  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }



    packaged {
      initWith release
      signingConfig null
    }
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  //  sourceSets {
  //    main {
  //      jniLibs.srcDirs = ['libs']
  //      java.excludes = excludeFiles
  //
  //      // Exclude some useless files
  //      packagingOptions {
  //        excludes = excludePackage
  //      }
  //    }
  //
  ////    debug.setRoot('build-types/debug')
  ////    release.setRoot('build-types/release')
  //  }
  sourceSets {
    androidTest {
      jniLibs.srcDirs = ['libs']
      java.excludes = excludeFiles

      // Exclude some useless files
      packagingOptions {
        excludes = excludePackage
      }
    }

    debug.setRoot('build-types/debug')
    release.setRoot('build-types/release')
  }
  packagingOptions {
    pickFirst 'META-INF/NOTICE'
    pickFirst 'META-INF/LICENSE'
    exclude 'META-INF/MANIFEST.MF'
    excludes = excludePackage
  }
  buildToolsVersion build_versions.build_tools
}

// Grant permissions
//android.applicationVariants.all { variant ->
//  def applicationId = getPackageName()
//  def adb = android.getAdbExecutable().toString()
//  def variantName = variant.name.capitalize()
//  def grantPermissionTask = tasks.create("grant${variantName}Permissions").doLast({
//    "${adb} devices".execute().text.eachLine {
//      "${adb} shell pm grant ${applicationId} android.permission.RECORD_AUDIO".execute()
//      "${adb} shell pm grant ${applicationId} android.permission.WRITE_EXTERNAL_STORAGE".execute()
//      "${adb} shell pm grant ${applicationId} android.permission.CAMERA".execute()
//      "${adb} shell pm grant ${applicationId} android.permission.READ_PHONE_STATE".execute()
//      "${adb} shell pm grant ${applicationId} android.permission.READ_CONTACTS".execute()
//      "${adb} shell pm grant ${applicationId} android.permission.WRITE_CONTACTS".execute()
//    }
//  })
//}

task runApplication {
  doLast {
    def result = exec {
      executable = android.getAdbExecutable().toString()
      ignoreExitValue true
      args = ['shell', 'monkey', '-p', getPackageName(), '-c', 'android.intent.category.LAUNCHER', '1']
    }
  }
}
